{"version":3,"sources":["components/partials/button.jsx","components/partials/digit.jsx","components/digits.jsx","components/partials/operator.jsx","components/operators.jsx","components/reset.jsx","components/result.jsx","components/sum.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","_ref","buttonType","onClick","value","react_default","a","createElement","className","type","defaultProps","Digit","partials_button","Digits","Object","toConsumableArray","Array","keys","map","i","digit","key","concat","Operator","Operators","v","operator","Reset","Result","toString","Sum","INITIAL_STATE","currentResult","tempValue","App","state","updateResult","_this","setState","prevState","Number","doMath","_ref$currentResult","onOperatorClick","currentOperator","resetState","objectSpread","this","result","digits","operators","sum","components_reset","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f62a01f5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ buttonType, onClick, value }) => (\n  <button\n    className={buttonType}\n    onClick={() => onClick(value)}\n    type=\"button\"\n  >\n    {value}\n  </button>\n);\n\nButton.propTypes = {\n  buttonType: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]).isRequired,\n};\n\nButton.defaultProps = {\n  buttonType: '',\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './button';\n\nconst Digit = ({ onClick, value }) => (\n  <Button\n    buttonType=\"digit\"\n    onClick={onClick}\n    value={value}\n  />\n);\n\nDigit.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Digit;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Digit from './partials/digit';\n\nconst Digits = ({ onClick }) => (\n  [...Array(10).keys()].map(\n    i => <Digit key={`dig_${i}`} onClick={onClick} value={i} />,\n  )\n);\n\nDigits.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Digits;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './button';\n\nconst Operator = ({ onClick, value }) => (\n  <Button\n    buttonType=\"operator\"\n    onClick={onClick}\n    value={value}\n  />\n);\n\nOperator.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Operator;\n","import React from 'react';\n\nimport Operator from './partials/operator';\n\nconst Operators = ({ onClick }) => (\n  ['+', '-', '*', '/'].map(\n    v => <Operator key={`op_${v}`} onClick={onClick} value={v} />,\n  )\n);\n\nexport default Operators;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './partials/button';\n\nconst Reset = ({ onClick }) => (\n  <Button\n    buttonType=\"reset\"\n    onClick={onClick}\n    value=\"RESET\"\n  />\n);\n\nReset.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Reset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Result = ({ value }) => (\n  <div className=\"result\">\n    {value.toString()}\n  </div>\n);\n\nResult.propTypes = {\n  value: PropTypes.number.isRequired,\n};\n\nexport default Result;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './partials/button';\n\nconst Sum = ({ onClick }) => (\n  <Button\n    buttonType=\"operator\"\n    onClick={onClick}\n    value=\"=\"\n  />\n);\n\nSum.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Sum;\n","import React, { Component } from 'react';\n\nimport Digits from './components/digits';\nimport Operators from './components/operators';\nimport Reset from './components/reset';\nimport Result from './components/result';\nimport Sum from './components/sum';\n\nconst INITIAL_STATE = {\n  currentResult: 0,\n  operator: null,\n  tempValue: 0,\n};\n\nclass App extends Component {\n  state = INITIAL_STATE;\n\n  updateResult = (value) => {\n    if (this.state.operator === null) {\n      this.setState(prevState => ({\n        currentResult: Number(value),\n      }));\n    } else {\n      this.setState(prevState => ({\n        currentResult: Number(`${prevState.currentResult}${value}`),\n      }));\n    }\n  }\n\n  doMath = ({ operator, currentResult = this.state.currentResult }) => {\n    const { tempValue } = this.state;\n    switch (operator) {\n      case '+':\n        return tempValue + currentResult;\n      case '-':\n        return tempValue - currentResult;\n      case '/':\n        return tempValue / currentResult;\n      case '*':\n            return tempValue * currentResult;\n      default:\n        break;\n    }\n  }\n\n  onOperatorClick = (currentOperator) => {\n    if (this.state.operator === null) {\n      this.setState(prevState => ({\n        currentResult: 0,\n        operator: currentOperator,\n        tempValue: prevState.currentResult,\n      }));\n    } else if (currentOperator === '=') {\n      this.setState(prevState => ({\n        currentResult: this.doMath({operator: prevState.operator, currentResult: prevState.currentResult }),\n        operator: null,\n        tempValue: 0,\n      }));\n    } else {\n      this.setState(prevState => ({\n        currentResult: 0,\n        operator: currentOperator,\n        tempValue: this.doMath({operator: prevState.operator }),\n      }));\n    }\n  }\n\n\n  resetState = () => {\n    this.setState({...INITIAL_STATE});\n  }\n\n  render() {\n    const { currentResult } = this.state;\n    return (\n      <div className=\"main-container\">\n        <Result value={currentResult} />\n\n        <Digits onClick={this.updateResult} />\n        <Operators onClick={this.onOperatorClick} />\n        <Sum onClick={this.onOperatorClick} />\n\n        <Reset onClick={this.resetState} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}