{"version":3,"sources":["components/partials/button.jsx","components/digits.jsx","components/operators.jsx","components/reset.jsx","components/result.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","_ref","onClick","value","react_default","a","createElement","type","Digits","className","Object","toConsumableArray","Array","keys","map","i","partials_button","key","concat","Operators","v","Reset","Result","toString","INITIAL_STATE","currentResult","operator","tempValue","App","state","updateResult","_this","setState","prevState","Number","doMath","_ref$currentResult","removeLastDigit","substring","length","onOperatorClick","currentOperator","resetState","objectSpread","this","result","digits","operators","components_reset","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c099b54.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onClick, value }) => (\n  <button\n    onClick={() => onClick(value)}\n    type=\"button\"\n  >\n    {value}\n  </button>\n);\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]).isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './partials/button';\n\nconst Digits = ({ onClick }) => (\n  <div className=\"digit-area\">\n    {\n      [...Array(10).keys()].map(\n        i => <Button key={`dig_${i}`} onClick={onClick} value={i} />,\n      )\n    }\n  </div>\n);\n\nDigits.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Digits;\n","import React from 'react';\n\nimport Button from './partials/button';\n\nconst Operators = ({ onClick }) => (\n  <div className=\"operators-area\">\n    {\n      ['=', 'C', '+', '-', '*', '/'].map(\n        v => <Button key={`op_${v}`} onClick={onClick} value={v} />,\n      )\n    }\n  </div>\n);\n\nexport default Operators;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './partials/button';\n\nconst Reset = ({ onClick }) => (\n  <Button\n    onClick={onClick}\n    value=\"RESET\"\n  />\n);\n\nReset.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Reset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Result = ({ value }) => (\n  <div className=\"result\">\n    {value.toString()}\n  </div>\n);\n\nResult.propTypes = {\n  value: PropTypes.number.isRequired,\n};\n\nexport default Result;\n","import React, { Component } from 'react';\n\nimport Digits from './components/digits';\nimport Operators from './components/operators';\nimport Reset from './components/reset';\nimport Result from './components/result';\n\nconst INITIAL_STATE = {\n  currentResult: 0,\n  operator: null,\n  tempValue: 0,\n};\n\nclass App extends Component {\n  state = INITIAL_STATE;\n\n  updateResult = (value) => {\n    this.setState(prevState => ({\n      currentResult: Number(`${prevState.currentResult}${value}`),\n    }));\n  }\n\n  doMath = ({ operator, currentResult = this.state.currentResult }) => {\n    const { tempValue } = this.state;\n    switch (operator) {\n      case null:\n        return currentResult;\n      case '+':\n        return tempValue + currentResult;\n      case '-':\n        return tempValue - currentResult;\n      case '/':\n        return tempValue / currentResult;\n      case '*':\n        return tempValue * currentResult;\n      default:\n        break;\n    }\n  }\n\n  removeLastDigit = () => {\n    let currentResult = this.state.currentResult.toString();\n    return Number(currentResult.substring(0, currentResult.length - 1))\n  }\n\n  onOperatorClick = (currentOperator) => {\n    if (currentOperator === 'C' && this.state.currentResult > 9) {\n      this.setState(prevState => ({\n        currentResult: this.removeLastDigit(prevState.currentResult),\n      }));\n    } else if (currentOperator === 'C') {\n      this.setState({\n        currentResult: 0,\n      });\n    } else if (currentOperator === '=') {\n      this.setState(prevState => ({\n        currentResult: this.doMath({operator: prevState.operator, currentResult: prevState.currentResult }),\n        operator: null,\n        tempValue: 0,\n      }));\n    } else if (this.state.operator === null) {\n      this.setState(prevState => ({\n        currentResult: 0,\n        operator: currentOperator,\n        tempValue: prevState.currentResult,\n      }));\n    } else {\n      this.setState(prevState => ({\n        currentResult: 0,\n        operator: currentOperator,\n        tempValue: this.doMath({operator: prevState.operator }),\n      }));\n    }\n  }\n\n\n  resetState = () => {\n    this.setState({...INITIAL_STATE});\n  }\n\n  render() {\n    const { currentResult } = this.state;\n    return (\n      <div className=\"main-container\">\n        <Result value={currentResult} />\n\n        <Digits onClick={this.updateResult} />\n        <Operators onClick={this.onOperatorClick} />\n\n        <Reset onClick={this.resetState} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}