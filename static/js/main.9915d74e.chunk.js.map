{"version":3,"sources":["components/partials/button.jsx","components/partials/digit.jsx","components/digits.jsx","components/partials/operator.jsx","components/operators.jsx","components/reset.jsx","components/result.jsx","components/sum.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Button","_ref","buttonType","onClick","value","react_default","a","createElement","className","type","defaultProps","Digit","partials_button","Digits","Object","toConsumableArray","Array","keys","map","i","digit","Operator","Operators","operator","Reset","Result","Sum","App","state","currentNumber","currentOperator","previousNumber","createNewNumber","_this","concat","digitOnClick","setState","operatorOnClick","onSumUp","result","_this$state","Number","resetState","this","digits","operators","sum","components_reset","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9915d74e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ buttonType, onClick, value }) => (\n  <button\n    className={buttonType}\n    onClick={() => onClick(value)}\n    type=\"button\"\n  >\n    {value}\n  </button>\n);\n\nButton.propTypes = {\n  buttonType: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nButton.defaultProps = {\n  buttonType: '',\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './button';\n\nconst Digit = ({ onClick, value }) => (\n  <Button\n    buttonType=\"digit\"\n    onClick={onClick}\n    value={value}\n  />\n);\n\nDigit.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Digit;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Digit from './partials/digit';\n\nconst Digits = ({ onClick }) => (\n  [...Array(10).keys()].map(\n    i => <Digit onClick={onClick} value={i} />,\n  )\n);\n\nDigits.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Digits;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './button';\n\nconst Operator = ({ onClick, value }) => (\n  <Button\n    buttonType=\"operator\"\n    onClick={onClick}\n    value={value}\n  />\n);\n\nOperator.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Operator;\n","import React from 'react';\n\nimport Operator from './partials/operator';\n\nconst Operators = ({ onClick }) => (\n  ['+', '-', '*', '/'].map(\n    i => <Operator onClick={onClick} value={i} />,\n  )\n);\n\nexport default Operators;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './partials/button';\n\nconst Reset = ({ onClick }) => (\n  <Button\n    buttonType=\"reset\"\n    onClick={onClick}\n    value=\"RESET\"\n  />\n);\n\nReset.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Reset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Result = ({ value }) => (\n  <div className=\"result\">\n    {value}\n  </div>\n);\n\nResult.propTypes = {\n  value: PropTypes.string.isRequired,\n};\n\nexport default Result;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './partials/button';\n\nconst Sum = ({ onClick }) => (\n  <Button\n    buttonType=\"operator\"\n    onClick={onClick}\n    value=\"=\"\n  />\n);\n\nSum.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Sum;\n","import React, { Component } from 'react';\n\nimport Digits from './components/digits';\nimport Operators from './components/operators';\nimport Reset from './components/reset';\nimport Result from './components/result';\nimport Sum from './components/sum';\n\nclass App extends Component {\n  state = {\n    currentNumber: '',\n    currentOperator: '',\n    previousNumber: '',\n  }\n\n  createNewNumber = (digit) => {\n    const { currentNumber } = this.state;\n    return `${currentNumber}${digit}`;\n  }\n\n  digitOnClick = (value) => {\n    this.setState({\n      currentNumber: this.createNewNumber(value),\n    });\n  }\n\n  operatorOnClick = (value) => {\n    const { currentNumber } = this.state;\n    this.setState({\n      currentNumber: '',\n      currentOperator: value,\n      previousNumber: currentNumber,\n    });\n  }\n\n  onSumUp = () => {\n    let result;\n    const {\n      currentNumber,\n      currentOperator,\n      previousNumber,\n    } = this.state;\n\n    switch (currentOperator) {\n      case '+':\n        result = Number(previousNumber) + Number(currentNumber);\n        break;\n      case '-':\n        result = Number(previousNumber) - Number(currentNumber);\n        break;\n      case '*':\n        result = Number(previousNumber) * Number(currentNumber);\n        break;\n      case '/':\n        result = Number(previousNumber) / Number(currentNumber);\n        break;\n      default:\n        //\n    }\n    this.setState({\n      currentNumber: result,\n      currentOperator: '',\n      previousNumber: '',\n    });\n  }\n\n  resetState = () => {\n    this.setState({\n      currentNumber: '',\n      currentOperator: '',\n      previousNumber: '',\n    });\n  }\n\n  render() {\n    const { currentNumber } = this.state;\n    return (\n      <div className=\"main-container\">\n        <Result value={currentNumber} />\n\n        <Digits onClick={this.digitOnClick} />\n        <Operators onClick={this.operatorOnClick} />\n        <Sum onClick={this.onSumUp} />\n\n        <Reset onClick={this.resetState} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/styles.scss';\n\n/* eslint-disable */\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}