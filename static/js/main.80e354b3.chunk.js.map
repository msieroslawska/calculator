{"version":3,"sources":["components/partials/button.jsx","components/partials/digit.jsx","components/digits.jsx","components/partials/operator.jsx","components/operators.jsx","components/reset.jsx","components/result.jsx","components/sum.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","_ref","buttonType","onClick","value","react_default","a","createElement","className","type","defaultProps","Digit","partials_button","Digits","Object","toConsumableArray","Array","keys","map","i","digit","key","concat","Operator","Operators","v","partials_operator","Reset","Result","Sum","OPERATORS","App","state","latestValue","result","isOperator","includes","isAllowed","_this$state","_this","updateResult","setState","prevState","onSumUp","parsedResult","length","substring","tempNumber","finalResult","results","s","charAt","push","Number","console","log","forEach","_ref2","slicedToArray","number","toString","resetState","this","components_result","digits","operators","sum","components_reset","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80e354b3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ buttonType, onClick, value }) => (\n  <button\n    className={buttonType}\n    onClick={() => onClick(value)}\n    type=\"button\"\n  >\n    {value}\n  </button>\n);\n\nButton.propTypes = {\n  buttonType: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]).isRequired,\n};\n\nButton.defaultProps = {\n  buttonType: '',\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './button';\n\nconst Digit = ({ onClick, value }) => (\n  <Button\n    buttonType=\"digit\"\n    onClick={onClick}\n    value={value}\n  />\n);\n\nDigit.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Digit;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Digit from './partials/digit';\n\nconst Digits = ({ onClick }) => (\n  [...Array(10).keys()].map(\n    i => <Digit key={`dig_${i}`} onClick={onClick} value={i} />,\n  )\n);\n\nDigits.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Digits;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './button';\n\nconst Operator = ({ onClick, value }) => (\n  <Button\n    buttonType=\"operator\"\n    onClick={onClick}\n    value={value}\n  />\n);\n\nOperator.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Operator;\n","import React from 'react';\n\nimport Operator from './partials/operator';\n\nconst Operators = ({ onClick }) => (\n  ['+', '-', '*', '/'].map(\n    v => <Operator key={`op_${v}`} onClick={onClick} value={v} />,\n  )\n);\n\nexport default Operators;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './partials/button';\n\nconst Reset = ({ onClick }) => (\n  <Button\n    buttonType=\"reset\"\n    onClick={onClick}\n    value=\"RESET\"\n  />\n);\n\nReset.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Reset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Result = ({ value }) => (\n  <div className=\"result\">\n    {value}\n  </div>\n);\n\nResult.propTypes = {\n  value: PropTypes.string.isRequired,\n};\n\nexport default Result;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './partials/button';\n\nconst Sum = ({ onClick }) => (\n  <Button\n    buttonType=\"operator\"\n    onClick={onClick}\n    value=\"=\"\n  />\n);\n\nSum.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Sum;\n","import React, { Component } from 'react';\n\nimport Digits from './components/digits';\nimport Operators from './components/operators';\nimport Reset from './components/reset';\nimport Result from './components/result';\nimport Sum from './components/sum';\n\nconst OPERATORS = ['+', '-', '*', '/'];\n\nclass App extends Component {\n  state = {\n    latestValue: '',\n    result: '',\n  }\n\n  isOperator = value => OPERATORS.includes(value)\n\n  isAllowed = (value) => {\n    const { latestValue, result } = this.state;\n    if (result === '' && this.isOperator(value)) { // cannot start with op\n      return false;\n    }\n    if (this.isOperator(latestValue) && this.isOperator(value)) { // cannot double ops\n      return false;\n    }\n    return true;\n  }\n\n  updateResult = (value) => {\n    if (this.isAllowed(value)) {\n      this.setState(prevState => ({\n        latestValue: value,\n        result: `${prevState.result}${value}`,\n      }));\n    }\n  }\n\n  onSumUp = () => {\n    const { result } = this.state;\n    const parsedResult = this.isOperator(result[result.length - 1])\n      ? result.substring(0, result.length - 1)\n      : result;\n    let tempNumber = '';\n    let finalResult = parsedResult[0];\n    const results = [];\n\n    for (let i = 1; i <= parsedResult.length; i += 1) {\n      const s = parsedResult.charAt(i);\n      if (!this.isOperator(s)) {\n        tempNumber += s; // combine as string\n        console.log('x not op', tempNumber);\n      } else {\n        results.push([Number(tempNumber), s]);\n        tempNumber = '';\n        console.log('x is op', results);\n      }\n    }\n\n    console.log(results);\n\n    results.forEach(([number, operator]) => {\n      switch (operator) {\n        case '+':\n          finalResult += number;\n          break;\n        case '-':\n          finalResult -= number;\n          break;\n        case '*':\n          finalResult *= number;\n          break;\n        case '/':\n          finalResult /= number;\n          break;\n        default:\n          //\n      }\n    });\n\n    this.setState({\n      latestValue: '',\n      result: finalResult.toString(),\n    });\n  }\n\n  resetState = () => {\n    this.setState({\n      latestValue: '',\n      result: '',\n    });\n  }\n\n  render() {\n    const { result } = this.state;\n    return (\n      <div className=\"main-container\">\n        <Result value={result} />\n\n        <Digits onClick={this.updateResult} />\n        <Operators onClick={this.updateResult} />\n        <Sum onClick={this.onSumUp} />\n\n        <Reset onClick={this.resetState} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}